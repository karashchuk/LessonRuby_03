# 1. Методы Ruby Core API
#
# Найдите в документации Ruby по адресу http://ruby-doc.org/core/ методы для объектов разных классов. Поэкспериментируйте с ними в интерактивной оболочке irb
#
# Для класса Hash:
#
#     Метод, принимающий блок и удаляющий пару, если условие внутри блока вычисляется в true
h = { "a" => 100, "b" => 200, "c" => 300 }
p h
h.delete_if {|key, value| key >= "b" }
p h

#     Метод, проверяющий пуст ли хэш
p h.empty?

#
#     Метод, принимающий аргументы переменной длины, каждый из которых является ключом хэша.
# Если удаётся последовательно получить значение для каждого из ключей, возвращается это значение.
# Если нет - возвращается nil. Трудно объяснить метод словами, поэтому ниже пример:
#
storage = { data: { name: 'John' } }
p storage.dig(:data, :name) # => 'John'
p storage.dig(:data, :age)  # => nil


#
# Для класса Symbol:
#
#     Метод, возвращающий массив всех определённых символов в памяти на данный момент

p Symbol.all_symbols
#
#     Метод, проверяющий находится ли зданное имя символа между двумя другими заданными именами символов.
# Между – имеется в виду проверка по кодам ASCII для символов из которых состоит объект класса Symbol

p 'd'.between?('a','g')
#
# Для класса File:
#
#     Метод, превращающий путь к файлу в его абсолютный путь
p File.absolute_path('lesson_03_1_methods.rb')
p File.absolute_path('test')
#
#     Метод проверяющий, является ли данный файл каталогом
p File.directory?('lesson_03_1_methods.rb')
#
#     Метод проверяющий существование файла
p File.exist?("test")
#
#     Метод возвращающий время модификации файла
#p File.new("test").mtime # - не видит файл

#
# Для класса Time:
#
#     Метод, возвращающий текущее время
p Time.now
#
#     Метод, проверяющий пятница ли сегодня
p Time.now.friday?
#
#     Метод, возвращающий строку с названием часового пояса
p Time.now.zone

# Для модуля Kernel:
#
#     Метод, возволяющий исполнять любой Ruby код, переданный в качестве строки

#
#     Метод, позволяющий приостановить работу программы на определённое количество секунд
p Time.now
sleep 2
p Time.now
#
# 2. Сколько здесь вариантов?
#
# Напишите метод combination для поиска сочетаний в массиве элементов. Сравните производительность метода с одноимённым методом Ruby из класса Array при помощи модуля Benchmark. Пример:
#
# elements = [:one, :two, :three, :four]
# combination elements, 2 # => [[:one, :two], [:one, :three], [:one, :four], [:two, :three], [:two, :four], [:three, :four]]
#
# В качестве дополнительной тренировки модифицируйте ваш метод таким образом, чтобы он принимал переменное количество аргументов:
#
# combination :one, :two, :three, :four, group_size: 2
#
# 3. Собственный тип данных
#
# Подумайте над любой задачей из реального мира, определите сущности и попробуйте представить их с помощью типов данных Ruby. Для каких сущностей вы определили собственные классы и почему?
# 4. ООП в движении
#
# Понаблюдайте и попробуйте описать (в виде свободного текста) процесс взаимодействия между объектами по аналогии с примером продавца. Постарайтесь чётко обозначить какие объекты участвуют во взаимодействии, каким поведением (методами) они обладают и каким состоянием (данными), какие методы вызываются в процессе взаимодействия.
